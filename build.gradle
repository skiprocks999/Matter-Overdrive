buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.parchmentmc:librarian:1.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

libsDirName = "../output"
distsDirName = "../output"

version = "$project.minecraft_version-$project.major_version.$project.minor_version.$project.patch_version-$project.revision_version"
group = project.modId
archivesBaseName = project.modId

java.toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ADOPTOPENJDK
}

def version_properties = [
        "loader_version"    : loaderVersion,
        "license"           : license,
        "issue_tracker_url" : issueTrackerURL,
        "mod_id"            : modId,
        "version"           : "$project.major_version.$project.minor_version.$project.patch_version-$project.revision_version",
        "mod_name"          : modName,
        "display_url"       : displayURL,
        "forge_version"     : forge_version,
        "description"       : modDesc
]

processResources {
    outputs.upToDateWhen { false }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/main/"
}

minecraft {
    mappings channel: project.mappings_type, version: project.mappings_version
    if (project.modTransformer) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'epos'
            mods {
                matteroverdrive {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'epos'
            mods {
                matteroverdrive {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'matteroverdrive'
            mods {
                epos {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'matteroverdrive', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                matteroverdrive {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
	    name = "Progwml6 maven"
	    url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
	    name = "ModMaven"
	    url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "Mekanism"
        url = "https://modmaven.dev/"
    }
    maven {
        name = "Titanium"
        url  = "https://maven.blamejared.com/"
    }
}

dependencies {
    // Minecraft & Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Titanium
    implementation fg.deobf(project.dependencies.create("com.hrznstudio:titanium:${titanium_version}") {
        transitive = false
    })

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // Mekanism
    runtimeOnly fg.deobf("mekanism:Mekanism:${minecraft_version}-${mekanism_version}")
}

jar {
    manifest {
        finalizedBy "reobfJar"
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : project.modName,
                "Specification-Version"   : "${major_version}-${minor_version}-${patch_version}",
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : 0,
                "Implementation-Vendor"   : project.modName,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 

task sourcesJar(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
	classifier = 'sources'
}
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
}

artifacts {
	archives sourcesJar
	archives deobfJar
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
